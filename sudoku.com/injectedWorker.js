// ! THIS FILE IS NOT LOADED WITH EXTENSION
// content here is only for easier reading,
// it is injected inside an <script> tag
// directly in the <head>

function inject(){
    console.log("TPS | injecting");

    // 0 in the game clears the cell, here is needed to esily get from chat
    // without using math and parsing as integer
    // numbers 0-9 |  | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
    let sdkKeys =  [0, 49, 50, 51, 52, 53, 54, 55, 56, 57];
    document.addEventListener('setActiveCell', e => {
        // console.log(e.detail.position, ":", e.detail.value);

        // use page native/open variable to set cell acrive
        gameScene.setActiveCell(e.detail.position);

        // wait 100 milisseconds to send a keyboard event
        setTimeout(() => {
            // send an event, making the game thinks you pressed the key on your keyboard
            // it also send an flag "isTrusted=false", different from actual keyboard press,
            // indicating that the event was generated by code and not a physical keyboard.
            document.dispatchEvent(new KeyboardEvent('keydown', {keyCode: sdkKeys[e.detail.value]}))

            
            // extra stuff, not required but good to have
            // document.dispatchEvent(new KeyboardEvent('keydown', {
            //     key: '5', 
            //     keyCode: 53, 
            //     code: "Digit5", 
            //     shiftKey: false, 
            //     ctrlKey: false, 
            //     metaKey: false
            // }))
        }, 100);

    })
}
inject()
console.log("injected");

// for testing, generates an event with random data 2 seconds after page loads
// setTimeout(()=>{
//     document.dispatchEvent(new CustomEvent('setActiveCell', {detail: {
//         time: new Date(),
//         position: parseInt(Math.random() * 80),
//         value: parseInt(Math.random() * 5)
//     }}))
//     console.log("test event dispatched")
// }, 2000)